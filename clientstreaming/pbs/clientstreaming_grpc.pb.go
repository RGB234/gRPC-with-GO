// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: clientstreaming.proto

package clientstreaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientStreamingClient is the client API for ClientStreaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientStreamingClient interface {
	// A Client streaming RPC.
	ProcessIO(ctx context.Context, opts ...grpc.CallOption) (ClientStreaming_ProcessIOClient, error)
}

type clientStreamingClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStreamingClient(cc grpc.ClientConnInterface) ClientStreamingClient {
	return &clientStreamingClient{cc}
}

func (c *clientStreamingClient) ProcessIO(ctx context.Context, opts ...grpc.CallOption) (ClientStreaming_ProcessIOClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientStreaming_ServiceDesc.Streams[0], "/clientstreaming.ClientStreaming/ProcessIO", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientStreamingProcessIOClient{stream}
	return x, nil
}

type ClientStreaming_ProcessIOClient interface {
	Send(*Message) error
	CloseAndRecv() (*Number, error)
	grpc.ClientStream
}

type clientStreamingProcessIOClient struct {
	grpc.ClientStream
}

func (x *clientStreamingProcessIOClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientStreamingProcessIOClient) CloseAndRecv() (*Number, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Number)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamingServer is the server API for ClientStreaming service.
// All implementations must embed UnimplementedClientStreamingServer
// for forward compatibility
type ClientStreamingServer interface {
	// A Client streaming RPC.
	ProcessIO(ClientStreaming_ProcessIOServer) error
	mustEmbedUnimplementedClientStreamingServer()
}

// UnimplementedClientStreamingServer must be embedded to have forward compatible implementations.
type UnimplementedClientStreamingServer struct {
}

func (UnimplementedClientStreamingServer) ProcessIO(ClientStreaming_ProcessIOServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessIO not implemented")
}
func (UnimplementedClientStreamingServer) mustEmbedUnimplementedClientStreamingServer() {}

// UnsafeClientStreamingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientStreamingServer will
// result in compilation errors.
type UnsafeClientStreamingServer interface {
	mustEmbedUnimplementedClientStreamingServer()
}

func RegisterClientStreamingServer(s grpc.ServiceRegistrar, srv ClientStreamingServer) {
	s.RegisterService(&ClientStreaming_ServiceDesc, srv)
}

func _ClientStreaming_ProcessIO_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamingServer).ProcessIO(&clientStreamingProcessIOServer{stream})
}

type ClientStreaming_ProcessIOServer interface {
	SendAndClose(*Number) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type clientStreamingProcessIOServer struct {
	grpc.ServerStream
}

func (x *clientStreamingProcessIOServer) SendAndClose(m *Number) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientStreamingProcessIOServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreaming_ServiceDesc is the grpc.ServiceDesc for ClientStreaming service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientStreaming_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientstreaming.ClientStreaming",
	HandlerType: (*ClientStreamingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessIO",
			Handler:       _ClientStreaming_ProcessIO_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "clientstreaming.proto",
}
